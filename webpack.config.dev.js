import webpack from "webpack";
import MiniCssExtractPlugin from "mini-css-extract-plugin";
import HtmlWebpackPlugin from "html-webpack-plugin";
import path from "path";
import resolve from "./webpack.resolve";
import autoprefixer from "autoprefixer";

const styleRule = (
  { test, buildMode, sourceMap, include, exclude },
  use = []
) => ({
  include,
  exclude,
  test,
  use: [
    {
      loader: "@teamsupercell/typings-for-css-modules-loader",
      options: {
        formatter: "prettier",
        verifyOnly: buildMode === "production",
        disableLocalsExport: true,
        banner: `
					/* tslint:disable */
					/* eslint-disable */
					/* This file is automatically generated by typings-for-css-modules */
					/* Do not modify it directly */
				`,
      },
    },
    MiniCssExtractPlugin.loader,
    {
      loader: "css-loader",
      options: {
        sourceMap: sourceMap,
        importLoaders: use ? 2 : 1,
        modules: {
          mode: "global", // Interim: this requires us to explicitly opt-in to Modules by using `:local` selectors
          localIdentName: "[name]__[local]__[contenthash:base64:5]",
        },
      },
    },
    {
      loader: "postcss-loader",
      options: {
        postcssOptions: {
          plugins: [autoprefixer],
        }
      },
    },
  ].concat(use),
});

export default {
  resolve: resolve,
  devtool: "eval-cheap-module-source-map", // more info:https://webpack.js.org/guides/development/#using-source-maps and https://webpack.js.org/configuration/devtool/
  entry: [
    // must be first entry to properly set public path
    "./src/webpack-public-path",
    "react-hot-loader/patch",
    "webpack-hot-middleware/client?reload=true",
    path.resolve(__dirname, "src/index.js"), // Defining path seems necessary for this to work consistently on Windows machines.
  ],
  target: "web",
  mode: "development",
  output: {
    path: path.resolve(__dirname, "dist"), // Note: Physical files are only output by the production build task `npm run build`.
    publicPath: "/",
    filename: "build.js",
  },
  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
    new MiniCssExtractPlugin({
      filename: "css/[name].css",
    }),
    new HtmlWebpackPlugin({
      // Create HTML file that includes references to bundled CSS and JS.
      template: "src/index.ejs",
      minify: {
        removeComments: true,
        collapseWhitespace: true,
      },
      inject: true,
    }),
  ],
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: ["babel-loader"],
      },
      {
        test: /\.ts(x?)$/,
        exclude: /node_modules/,
        use: [
          {
            loader: "ts-loader",
          },
        ],
      },
      {
        test: /\.eot(\?v=\d+.\d+.\d+)?$/,
        exclude: /node_modules/,
        use: ["file-loader"],
      },
      {
        test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
        exclude: /node_modules/,
        use: [
          {
            loader: "url-loader",
            options: {
              limit: 10000,
              mimetype: "application/font-woff",
            },
          },
        ],
      },
      {
        test: /\.[ot]tf(\?v=\d+.\d+.\d+)?$/,
        exclude: /node_modules/,
        use: [
          {
            loader: "url-loader",
            options: {
              limit: 10000,
              mimetype: "application/octet-stream",
            },
          },
        ],
      },
      {
        test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
        exclude: /node_modules/,
        use: [
          {
            loader: "url-loader",
            options: {
              limit: 10000,
              mimetype: "image/svg+xml",
            },
          },
        ],
      },
      {
        test: /\.(jpe?g|png|gif|ico)$/i,
        exclude: /node_modules/,
        use: [
          {
            loader: "file-loader",
            options: {
              name: "[name].[ext]",
            },
          },
        ],
      },
      {
        enforce: "pre",
        test: /\.js$/,
        loader: "source-map-loader",
      },
      styleRule({
        test: /\.css$/,
        exclude: /node_modules/,
        buildMode: "development",
        sourceMap: true,
      }),
      styleRule(
        {
          test: /\.less$/,
          exclude: /node_modules/,
          buildMode: "development",
          sourceMap: true,
        },
        {
          loader: "less-loader",
          options: {
            sourceMap: true,
            lessOptions: {
              plugins: [autoprefixer],
            },
          },
        }
      ),
    ],
  },
};
